// Datasource
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

// Enums
enum CampaignStatus {
  draft
  running
  paused
  completed
  failed
}

enum RecipientStatus {
  pending
  sent
  failed
  skipped
}

enum PlanType {
  free
  starter
  professional
  enterprise
}

enum SubscriptionStatus {
  active
  cancelled
  expired
  trialing
}

enum TeamRole {
  owner
  admin
  member
}

// Models
model users {
  id               String    @id @default(cuid())
  email            String    @unique
  password_hash    String
  email_verified_at DateTime? 
  full_name        String?
  company          String?
  website          String?
  phone            String?
  role             String?
  purpose          String?
  onboarding_completed_at DateTime?
  created_at       DateTime  @default(now())
  google_accounts  google_accounts[]
  templates        templates[]
  uploads          uploads[]
  contacts         contacts[]
  campaigns        campaigns[]
  audit_logs       audit_logs[]
  email_verifications email_verifications[]
  subscription     user_subscriptions?
  email_usage      email_usage[]
  api_keys         api_keys[]
  team_memberships team_members[] @relation("TeamMember")
  owned_teams      team_members[] @relation("TeamOwner")
}

model google_accounts {
  id                     String   @id @default(cuid())
  user_id                String
  user                   users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  google_user_id         String
  email                  String
  refresh_token_encrypted String
  access_token           String?
  token_expiry           DateTime?
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  campaigns              campaigns[]

  @@index([user_id])
  @@unique([user_id, google_user_id])
}

model templates {
  id         String   @id @default(cuid())
  user_id    String
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name       String
  subject    String
  html       String
  text       String
  variables  Json
  version    Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  campaigns  campaigns[]

  @@index([user_id])
}

model uploads {
  id         String   @id @default(cuid())
  user_id    String
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  blob_key   String
  filename   String
  columns    Json
  row_count  Int
  created_at DateTime @default(now())
  contacts   contacts[]
  campaigns  campaigns[]

  @@index([user_id])
}

model contacts {
  id            String   @id @default(cuid())
  user_id       String
  user          users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  upload_id     String?
  upload        uploads? @relation(fields: [upload_id], references: [id], onDelete: Cascade)
  email         String
  fields        Json
  unsubscribed  Boolean  @default(false)
  created_at    DateTime @default(now())
  recipients    campaign_recipients[]

  @@index([user_id])
  @@index([upload_id])
  @@unique([user_id, email])
}

model campaigns {
  id               String   @id @default(cuid())
  user_id          String
  user             users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name             String
  google_account_id String
  google_account   google_accounts @relation(fields: [google_account_id], references: [id])
  template_id      String
  template         templates @relation(fields: [template_id], references: [id])
  upload_id        String
  upload           uploads   @relation(fields: [upload_id], references: [id], onDelete: Cascade)
  filters          Json
  status           CampaignStatus
  batch_size       Int       @default(40)
  per_minute_limit Int       @default(80)
  created_at       DateTime  @default(now())
  started_at       DateTime?
  completed_at     DateTime?
  recipients       campaign_recipients[]

  @@index([user_id])
  @@index([status])
}

model campaign_recipients {
  id               String   @id @default(cuid())
  campaign_id      String
  campaign         campaigns @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  contact_id       String
  contact          contacts  @relation(fields: [contact_id], references: [id], onDelete: Cascade)
  rendered_subject String?
  rendered_html    String?
  rendered_text    String?
  status           RecipientStatus @default(pending)
  gmail_message_id String?
  error            String?
  attempts         Int      @default(0)
  last_attempt_at  DateTime?
  created_at       DateTime @default(now())

  @@index([campaign_id])
  @@index([contact_id])
  @@index([campaign_id, status])
  @@unique([campaign_id, contact_id])
}

model audit_logs {
  id          String   @id @default(cuid())
  user_id     String
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  action      String
  entity_type String
  entity_id   String
  metadata    Json
  created_at  DateTime @default(now())

  @@index([user_id])
}

model email_verifications {
  id         String   @id @default(cuid())
  user_id    String
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([user_id])
}

model plans {
  id                     String   @id @default(cuid())
  name                   String
  type                   PlanType @unique
  price_monthly          Float
  price_yearly           Float
  emails_per_month       Int
  contacts_limit         Int
  templates_limit        Int
  campaigns_limit        Int
  team_members           Int
  custom_branding        Boolean  @default(false)
  priority_support       Boolean  @default(false)
  api_access             Boolean  @default(false)
  advanced_analytics     Boolean  @default(false)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  user_subscriptions     user_subscriptions[]
}

model user_subscriptions {
  id                     String   @id @default(cuid())
  user_id                String   @unique
  user                   users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  plan_id                String
  plan                   plans    @relation(fields: [plan_id], references: [id])
  status                 SubscriptionStatus
  current_period_start   DateTime
  current_period_end     DateTime
  cancel_at_period_end   Boolean  @default(false)
  razorpay_customer_id   String?  @unique
  razorpay_subscription_id String? @unique
  payment_gateway        String?  @default("razorpay") // only "razorpay"
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
  payments               payments[]

  @@index([user_id])
  @@index([plan_id])
}

model email_usage {
  id          String   @id @default(cuid())
  user_id     String
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  year        Int
  month       Int
  emails_sent Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([user_id, year, month])
  @@index([user_id])
}

model api_keys {
  id            String    @id @default(cuid())
  user_id       String
  user          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  name          String
  key_hash      String    @unique
  last_used_at  DateTime?
  expires_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@index([user_id])
}

model team_members {
  id            String    @id @default(cuid())
  team_owner_id String
  team_owner    users     @relation("TeamOwner", fields: [team_owner_id], references: [id], onDelete: Cascade)
  user_id       String
  user          users     @relation("TeamMember", fields: [user_id], references: [id], onDelete: Cascade)
  role          TeamRole  @default(member)
  invited_at    DateTime  @default(now())
  accepted_at   DateTime?
  invite_token  String?   @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@unique([team_owner_id, user_id])
  @@index([team_owner_id])
  @@index([user_id])
}



model payments {
  id                    String   @id @default(cuid())
  subscription_id       String
  subscription          user_subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  razorpay_order_id     String?  @unique
  razorpay_payment_id   String?  @unique
  razorpay_signature    String?
  amount                Float
  currency              String   @default("INR")
  status                String   // "created", "authorized", "captured", "failed", "refunded"
  payment_method        String?  // "card", "upi", "netbanking", etc.
  payment_gateway       String   // only "razorpay"
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@index([subscription_id])
  @@index([razorpay_order_id])
}
