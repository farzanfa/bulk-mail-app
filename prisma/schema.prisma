generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model users {
  id                      String                @id @default(cuid())
  email                   String                @unique
  password_hash           String
  email_verified_at       DateTime?
  created_at              DateTime              @default(now())
  company                 String?
  full_name               String?
  onboarding_completed_at DateTime?
  phone                   String?
  purpose                 String?
  role                    String?
  website                 String?
  api_keys                api_keys[]
  audit_logs              audit_logs[]
  campaigns               campaigns[]
  contacts                contacts[]
  email_usage             email_usage[]
  email_verifications     email_verifications[]
  google_accounts         google_accounts[]
  owned_teams             team_members[]        @relation("TeamOwner")
  team_memberships        team_members[]        @relation("TeamMember")
  templates               templates[]
  uploads                 uploads[]
  subscription            user_subscriptions?
}

model google_accounts {
  id                      String      @id @default(cuid())
  user_id                 String
  google_user_id          String
  email                   String
  refresh_token_encrypted String
  access_token            String?
  token_expiry            DateTime?
  created_at              DateTime    @default(now())
  updated_at              DateTime    @updatedAt
  campaigns               campaigns[]
  user                    users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, google_user_id])
  @@index([user_id])
}

model templates {
  id         String      @id @default(cuid())
  user_id    String
  name       String
  subject    String
  html       String
  text       String
  variables  Json
  version    Int         @default(1)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  campaigns  campaigns[]
  user       users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model uploads {
  id         String      @id @default(cuid())
  user_id    String
  blob_key   String
  filename   String
  columns    Json
  row_count  Int
  created_at DateTime    @default(now())
  campaigns  campaigns[]
  contacts   contacts[]
  user       users       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model contacts {
  id           String                @id @default(cuid())
  user_id      String
  upload_id    String?
  email        String
  fields       Json
  unsubscribed Boolean               @default(false)
  created_at   DateTime              @default(now())
  recipients   campaign_recipients[]
  upload       uploads?              @relation(fields: [upload_id], references: [id])
  user         users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, email])
  @@index([user_id])
  @@index([upload_id])
}

model campaigns {
  id                String                @id @default(cuid())
  user_id           String
  google_account_id String
  template_id       String
  upload_id         String
  filters           Json
  status            CampaignStatus
  batch_size        Int                   @default(40)
  per_minute_limit  Int                   @default(80)
  created_at        DateTime              @default(now())
  started_at        DateTime?
  completed_at      DateTime?
  name              String                @default("")
  recipients        campaign_recipients[]
  google_account    google_accounts       @relation(fields: [google_account_id], references: [id])
  template          templates             @relation(fields: [template_id], references: [id])
  upload            uploads               @relation(fields: [upload_id], references: [id])
  user              users                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([status])
}

model campaign_recipients {
  id               String          @id @default(cuid())
  campaign_id      String
  contact_id       String
  rendered_subject String?
  rendered_html    String?
  rendered_text    String?
  status           RecipientStatus @default(pending)
  gmail_message_id String?
  error            String?
  attempts         Int             @default(0)
  last_attempt_at  DateTime?
  created_at       DateTime        @default(now())
  campaign         campaigns       @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  contact          contacts        @relation(fields: [contact_id], references: [id])

  @@unique([campaign_id, contact_id])
  @@index([campaign_id])
  @@index([contact_id])
  @@index([campaign_id, status])
}

model audit_logs {
  id          String   @id @default(cuid())
  user_id     String
  action      String
  entity_type String
  entity_id   String
  metadata    Json
  created_at  DateTime @default(now())
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model email_verifications {
  id         String   @id @default(cuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model email_usage {
  id          String   @id @default(cuid())
  user_id     String
  year        Int
  month       Int
  emails_sent Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, year, month])
  @@index([user_id])
}

model api_keys {
  id           String    @id @default(cuid())
  user_id      String
  name         String
  key_hash     String    @unique
  last_used_at DateTime?
  expires_at   DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model team_members {
  id            String    @id @default(cuid())
  team_owner_id String
  user_id       String
  role          TeamRole  @default(member)
  invited_at    DateTime  @default(now())
  accepted_at   DateTime?
  invite_token  String?   @unique
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  team_owner    users     @relation("TeamOwner", fields: [team_owner_id], references: [id], onDelete: Cascade)
  user          users     @relation("TeamMember", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([team_owner_id, user_id])
  @@index([team_owner_id])
  @@index([user_id])
}

model plans {
  id                 String               @id @default(cuid())
  name               String
  type               String               @unique
  price_monthly      Float
  price_yearly       Float
  emails_per_month   Int
  contacts_limit     Int
  templates_limit    Int
  campaigns_limit    Int
  team_members       Int
  custom_branding    Boolean              @default(false)
  priority_support   Boolean              @default(false)
  api_access         Boolean              @default(false)
  advanced_analytics Boolean              @default(false)
  created_at         DateTime             @default(now())
  updated_at         DateTime             @default(now()) @updatedAt
  user_subscriptions user_subscriptions[]
}

model user_subscriptions {
  id                       String     @id @default(cuid())
  user_id                  String     @unique
  plan_id                  String
  status                   String
  current_period_start     DateTime
  current_period_end       DateTime
  cancel_at_period_end     Boolean    @default(false)
  created_at               DateTime   @default(now())
  updated_at               DateTime   @default(now()) @updatedAt
  razorpay_customer_id     String?
  razorpay_subscription_id String?    @unique
  payment_gateway          String?    @default("razorpay")
  payments                 payments[]
  plan                     plans      @relation(fields: [plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_plan")
  user                     users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([plan_id], map: "idx_user_subscriptions_plan_id")
  @@index([user_id], map: "idx_user_subscriptions_user_id")
}

model payments {
  id                  String             @id @default(cuid())
  subscription_id     String
  razorpay_order_id   String?            @unique
  razorpay_payment_id String?            @unique
  razorpay_signature  String?
  amount              Float
  currency            String             @default("INR")
  status              String
  payment_method      String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @default(now()) @updatedAt
  subscription        user_subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_subscription")

  @@index([razorpay_order_id], map: "idx_payments_razorpay_order_id")
  @@index([subscription_id], map: "idx_payments_subscription_id")
}

enum CampaignStatus {
  draft
  running
  paused
  completed
  failed
}

enum RecipientStatus {
  pending
  sent
  failed
  skipped
}

enum TeamRole {
  owner
  admin
  member
}

enum PlanType {
  free
  starter
  professional
  enterprise
}

enum SubscriptionStatus {
  active
  cancelled
  expired
  trialing
}
